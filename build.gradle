import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java-library'
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'biz.aQute.bnd.builder' version '5.1.2'
    id 'io.codearte.nexus-staging' version '0.21.0'
    id "de.marcphilipp.nexus-publish" version "0.3.0"
    id "org.gradle.test-retry" version "1.1.9"
}

import aQute.bnd.gradle.Bundle

// Update version here
// ** IMPORTANT ** BE SURE TO UPDATE THESE FILES WITH THE LATEST VERSION **
// src/main/java/io/nats/client/Nats.java
// src/main/java/io/nats/client/package-info.java
// CHANGELOG.md
def jarVersion = "2.11.0"

// TRAVIS_BRANCH equals TRAVIS_TAG when a tag exists / a tag event
def secureEnv = System.getenv("TRAVIS_SECURE_ENV_VARS") != null ? System.getenv("TRAVIS_SECURE_ENV_VARS") : "false"
def branch = System.getenv("TRAVIS_BRANCH") != null ? System.getenv("TRAVIS_BRANCH") : ""
def tag = System.getenv("TRAVIS_TAG") != null ? System.getenv("TRAVIS_TAG") : ""

// we only sign when we have a tag which means a release (non -SNAPSHOT)
def useSigning = "true" == secureEnv && tag == branch

// all releases that are not tagged from github will have snapshot on them
def getVersionName = { ->
    if ("" == tag)  {
        return jarVersion + "-SNAPSHOT"
    }
    return jarVersion
}

version = getVersionName()
archivesBaseName = 'jnats'
group = 'io.nats'

// Get signing properties set up from outside (env var can't handle the dot)
if (System.getenv('SONATYPE_USERNAME') != null) {
    project.ext['ossrhUsername'] = System.getenv('SONATYPE_USERNAME')
    project.ext['ossrhPassword'] = System.getenv('SONATYPE_PASSWORD')
    project.ext['signing.secretKeyRingFile'] = System.getenv('GPG_KEYRING_FILE')
    project.ext['signing.keyId'] = System.getenv('GPG_KEY_ID')
    project.ext['signing.password'] =  System.getenv('GPG_KEY_PASSPHRASE')
}

// If these aren't set, just set them to empty so we don't have issues getting them
if (!project.hasProperty('ossrhUsername')) {
    project.ext['ossrhUsername'] = ""
    project.ext['ossrhPassword'] = ""
}

tasks {
    closeRepository {
        onlyIf { nexusPublishing.useStaging.get() }
    }
    releaseRepository{
        onlyIf { nexusPublishing.useStaging.get() }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    jcenter()
}

dependencies {
    implementation 'net.i2p.crypto:eddsa:0.3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testImplementation 'io.nats:jnats-server-runner:1.0.5'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java','src/examples/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

task bundle(type: Bundle) {
    from sourceSets.main.output
    exclude("io/nats/examples/**")
}

jar {
    manifest {
        attributes('Automatic-Module-Name': 'io.nats.jnats')
    }
    bnd (['Implementation-Title': 'Java Nats',
          'Implementation-Version': jarVersion,
          'Implementation-Vendor': 'nats.io',
          "Import-Package": "!net.i2p.crypto.eddsa.math",
          "Import-Package": "net.i2p*",
          "Import-Package": "io.nats*"]
    )
    exclude("io/nats/examples/**")
}

test {
    useJUnitPlatform()
    maxHeapSize = "2g"
    testLogging {
        exceptionFormat = 'full'
        events "started", "passed", "skipped", "failed"
    }
    retry {
        failOnPassedAfterRetry = false
        if (OperatingSystem.current().isWindows() || OperatingSystem.current().isMacOsX()) {
            maxFailures = 1
            maxRetries = 1
        }
        else {
            maxFailures = 5
            maxRetries = 5
        }
    }
    maxParallelForks = Runtime.runtime.availableProcessors()
}

javadoc {
    options.overview = 'src/main/javadoc/overview.html' // relative to source root
    source = sourceSets.main.allJava
    title = "NATS.IO Java API"
    excludes = ['io/nats/client/impl', 'io/nats/examples',
                "io/nats/client/api/ConsumerCreateRequest.java"
    ]
    classpath = sourceSets.main.runtimeClasspath
    doLast {
        if (!OperatingSystem.current().isWindows()) {
            exec {
                println "Updating favicon on all html files"
                workingDir 'build/docs/javadoc'
                // Only on linux, mac at this point
                commandLine 'find', '.', '-name', '*.html', '-exec', 'sed', '-i', '-e', 's#<head>#<head><link rel="icon" type="image/ico" href="favicon.ico">#', '{}', ';'
            }
            copy {
                println "Copying images to javadoc folder"
                from 'src/main/javadoc/images'
                into 'build/docs/javadoc'
            }
        }
    }
}

task examplesJar(type: Jar) {
    archiveClassifier.set('examples')
    manifest {
        attributes('Implementation-Title': 'Java Nats Examples',
                'Implementation-Version': jarVersion,
                'Implementation-Vendor': 'nats.io')
    }
    from(sourceSets.main.output) {
        include "io/nats/examples/**"
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

// run build before running fat jar to get classes
task fatJar(type: Jar) {
    archiveClassifier.set('fat')
    manifest {
        attributes('Implementation-Title': 'Java Nats With Dependencies',
                'Implementation-Version': jarVersion,
                'Implementation-Vendor': 'nats.io')
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    afterEvaluate { // only report on main library not examples
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/examples**'])
        }))
    }
}

artifacts {
    archives javadocJar, sourcesJar, examplesJar
}

if (useSigning) {
    signing {
        sign configurations.archives
    }
}

nexusStaging {
    packageGroup = group
    username = project.getProperty('ossrhUsername')
    password = project.getProperty('ossrhPassword')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact examplesJar
            artifact javadocJar
            pom {
                name = 'jnats'
                packaging = 'jar'
                groupId = group
                artifactId = archivesBaseName
                description = 'Client library for working with the NATS messaging system.'
                url = 'https://github.com/nats-io/nats.java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "synadia"
                        name = "Synadia"
                        email = "info@synadia.com"
                        url = "https://nats.io"
                    }
                }
                scm {
                    url = 'https://github.com/nats-io/nats.java'
                }
            }

            pom.withXml {
                def pomFile = file("${project.buildDir}/generated-pom.xml")
                writeTo(pomFile)

                if (useSigning) {
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }
            }

            // create the signed artifacts
            if (useSigning) {
                project.tasks.signArchives.signatureFiles.each {
                    artifact(it) {
                        def matcher = it.file =~ /-(sources|javadoc|examples)\.jar\.asc$/
                        if (matcher.find()) {
                            classifier = matcher.group(1)
                        } else {
                            classifier = null
                        }
                        extension = 'jar.asc'
                    }
                }
            }
        }
    }

    nexusPublishing {
        repositories {
            sonatype {
                username = project.getProperty('ossrhUsername')
                password = project.getProperty('ossrhPassword')
            }
        }
    }

    model {
        tasks.generatePomFileForMavenJavaPublication {
            destination = file("$buildDir/generated-pom.xml")
        }

        tasks.publishMavenJavaPublicationToSonatypeRepository {
            if (useSigning) {
                dependsOn project.tasks.signArchives
            }
        }
    }
}